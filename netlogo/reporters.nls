to-report mean-duty-factor
  ifelse count chargers with [ [level] of this-charger-type > 0 ] > 0 [
    report mean [ energy-delivered / (24 * [charge-rate] of this-charger-type) ] of chargers with [ [level] of this-charger-type > 0 ]
  ][
    report 0
  ]
end

to-report num-stranded
  report count drivers with [state = "stranded"]
end

to-report num-stranded-by-delay
  report count drivers with [(max itin-delay-amount) > stranded-delay-threshold] 
end

to-report electric-miles-driven
  report sum [electric-miles-driven-by-driver] of drivers
end

to-report electric-miles-driven-by-driver
  ifelse is-bev? [
    report miles-driven
  ][
    report miles-driven - gasoline-used / hybrid-fuel-consumption
  ]
end


to-report available-chargers [#taz #level]
  let #found-chargers 0
  ask #taz[
    set #found-chargers ((item #level chargers-by-type) with [current-driver = nobody])
  ]
  report #found-chargers
end

to-report existing-chargers [#taz #level]
  let #found-chargers 0
  ask #taz[
    set #found-chargers (item #level chargers-by-type)
  ]
  report #found-chargers
end

to-report charge-rate-of [#charger]
  report [charge-rate] of ([this-charger-type] of #charger)
end
to-report energy-price-of [#charger]
  report [energy-price] of ([this-charger-type] of #charger)
end
to-report level-of [#charger]
  report [level] of ([this-charger-type] of #charger)
end
to-report distance-from-to [from-taz to-taz]
  report item ((from-taz - 1) * n-tazs + to-taz - 1 ) od-dist
end
to-report time-from-to [from-taz to-taz]
  report item ((from-taz - 1) * n-tazs + to-taz - 1 ) od-time
end
to-report od-index [destination source]
  report ((destination - 1) * n-tazs + source - 1)
end

to-report my-od-index
  report (([id] of current-taz - 1) * n-tazs + [id] of destination-taz - 1)
end

to-report driver-soc [the-driver]
  report [state-of-charge] of the-driver
end

to-report weight-delay [delay]
  ifelse delay >= 0 [report delay][report -0.5 * delay]
end

to-report end-soc-dist
  let #end-soc 1
  if is-bev? [  ; set end-soc here
    let rand-draw random-float 1
    ifelse rand-draw < 0.63 [
      set #end-soc 0.9 + random-float 0.1
      ][
      ifelse rand-draw < 0.68 [ 
        set #end-soc 0.8 + random-float 0.1
        ][
        ifelse rand-draw < 0.94 [ 
          set #end-soc 0.7 + random-float 0.1
          ][
          ifelse rand-draw < 0.97 [ 
            set #end-soc 0.6 + random-float 0.1
            ][
            ifelse rand-draw < 0.99 [ 
              set #end-soc 0.5 + random-float 0.1
              ][
              ifelse rand-draw < 0.995 [ 
                set #end-soc 0.4 + random-float 0.1
                ][
                set #end-soc 0.3 + random-float 0.1
       ]]]]]]]
  report #end-soc
end
