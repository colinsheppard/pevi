to-report mean-duty-factor
  ifelse count chargers with [ [level] of this-charger-type > 0 ] > 0 [
    report mean [ energy-delivered / (30 * [charge-rate] of this-charger-type) ] of chargers with [ [level] of this-charger-type > 0 ]
  ][
    report 0
  ]
end

to-report mean-duty-factor-by-level [the-level]
  ifelse count chargers with [ [level] of this-charger-type = the-level ] > 0 [
    report mean [ energy-delivered / (30 * [charge-rate] of this-charger-type) ] of chargers with [ [level] of this-charger-type = the-level ]
  ][
    report 0
  ]
end

to-report num-stranded
  report count drivers with [state = "stranded"]
end

to-report num-stranded-by-delay
  report count drivers with [(max itin-delay-amount) > stranded-delay-threshold] 
end

to-report electric-miles-driven
  report sum [electric-miles-driven-by-driver] of drivers
end

to-report electric-miles-driven-by-driver
  ifelse is-bev? [
    report miles-driven
  ][
    report miles-driven - gasoline-used / hybrid-fuel-consumption
  ]
end

to-report mean-delay
  let num-delay-events sum [length (filter [abs ? > 0] itin-delay-amount)] of drivers
   
  ifelse num-delay-events > 0 [
    report (sum [ sum map weight-delay itin-delay-amount  ] of drivers) / num-delay-events
  ][
    report 0
  ]
end

to-report total-charger-cost-including-external
  report sum [ [installed-cost] of this-charger-type ] of chargers with [ [level] of this-charger-type > 0 ] * 1000
end

to-report total-charger-cost 
  report sum [ [installed-cost] of this-charger-type ] of chargers with [ [level] of this-charger-type > 0 and [id] of location > 0] * 1000
end

to-report total-delay-cost
  let total-delay sum [ sum map weight-delay itin-delay-amount  ] of drivers
  ; Calculate cost of delay figuring there are 260 working days/year, 10 year lifespan of chargers
  let final-delay-cost 0
  let annual-delay-cost time-opportunity-cost * total-delay * (260 + 105 * weekend-factor)
  let t 1
  repeat charger-lifetime [
    set final-delay-cost final-delay-cost + annual-delay-cost / (1 + discount)^(t - 1)
    set t (t + 1)
  ] 
  report final-delay-cost / num-simulation-days
end

to-report objective-function
  report total-charger-cost + total-delay-cost 
end

to-report total-cost
  report total-charger-cost + total-delay-cost 
end

to-report marginal-cost-to-reduce-delay
  report (total-delay-cost - reference-delay-cost) / (total-charger-cost - reference-charger-cost)
end
